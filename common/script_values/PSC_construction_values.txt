
#Calculate construction while ignoring supply limit
calculate_total_construction_spending = {
	if = {
		limit = {
			num_queued_private_constructions > 0
		}
		value = investment_pool_gross_income
		multiply = {
			value = 1
			subtract = var:privatisation_percent_estimate
		}
	}
	add = var:limited_government_construction_spending
}

calculate_government_construction_spending = {
	value = var:real_construction_spending
	#subtract private spending
	subtract = {
		value = investment_pool_gross_income
		subtract = investment_pool_net_income
	}
	min = 0
}

privatisation_spending_percent = {
	value = var:privatisation_percent_estimate
	multiply = {
		value = privatisation_percent_weeks
		subtract = 1
	}
	divide = privatisation_percent_weeks
	add = {
		value = privatisation_spending_percent_weekly
		divide = privatisation_percent_weeks
	}
	max = 1
}

privatisation_spending_percent_weekly = {
	if = {
		limit = {
			var:prev_estimated_investment_pool = 0
		}
		value = 0
	}
	else = {
		value = var:prev_estimated_investment_pool
		subtract = investment_pool
		divide = {
			value = investment_pool_gross_income
			min = 1
		}
		min = 0
	}
}

state_construction_spending_allocation = {
	owner = {
		value = var:total_construction_spending
	}
	owner = {
		divide = {
			value = var:weighted_total
			min = 0.1
		}
	}
	if = {
		#in a case of no production, demand half the remaining demand to get construction to build
		limit = {
			var:state_construction_production = 0
		}
		value = local_var:remaining_construction_spending
		multiply = 0.5
		min = {
			value = {
				value = local_var:state_construction_base_price
				multiply = {
					value = 1
					add = define:NEconomy|PRICE_RANGE
				}
			}
			multiply = construction_min_demand
		}
		max = local_var:remaining_construction_spending
	}
	else = {
		multiply = var:state_construction_production
		divide = local_var:state_construction_base_price

		# demand only a limited amount more than is possible in this state
		max = {
			value = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
			multiply = var:state_construction_production

			#Add at most one level's production over the limit
			add = {
				value = var:state_construction_production
				b:building_construction_sector = {
					divide = {
						value = level
						multiply = occupancy
						min = 0.001
					}
				}
			}
			multiply = {
				value = local_var:state_construction_base_price
				multiply = {
					value = 1
					add = define:NEconomy|PRICE_RANGE
				}
			}
		}
	}
}

construction_ordering = {
	value = var:state_construction_production
	multiply = 100
	add = {
		value = gdp
		owner = {
			divide = {
				value = gdp
				min = 1
			}
		}
	}
}

#Scope: State
sum_construction_types_production = {
	sg:wood_construction = {
		value = state_goods_production
	}
	sg:iron_construction = {
		add = state_goods_production
	}
	sg:steel_construction = {
		add = state_goods_production
	}
	sg:arc_welded_construction = {
		add = state_goods_production
	}
}

calculate_limited_government_construction_spending = {
	value = var:max_government_construction_at_spending_level
	if = {
		limit = {
			OR = {
				is_construction_paused = yes
				construction_queue_num_queued_government_levels = 0 
			}
		}
		value = 0
	}
}

calculate_max_government_construction_spending = {
	value = income
	subtract = {
		value = investment_pool_gross_income
		subtract = investment_pool_net_income
	}
	multiply = var:weekly_income_multiplier
}

private_construction_increase = {
	value = investment_pool_gross_income
	multiply = {
		value = 1
		subtract = var:privatisation_percent_estimate
	}
	divide = {
		value = investment_pool_gross_income
		multiply = {
			value = 1
			subtract = var:privatisation_percent_estimate
		}
		add = var:limited_government_construction_spending
		min = 0.01
	}
	subtract = var:corrected_private_allocation
}

calculate_corrected_private_allocation = {
	value = modifier:country_private_construction_allocation_mult
	if = {
		limit = {
			has_variable = prev_construction_allocation
		}
		subtract = var:prev_construction_allocation
	}
	# bound to safe range
	min = 0
	max = 1
}

ai_construction_demand = {
	add = {
		value = weekly_net_fixed_income
		multiply = {
			value = 1
			add = scaled_gold_reserves
		}
		min = {
			value = income
			subtract = {
				value = investment_pool_gross_income
				subtract = investment_pool_net_income
			}
			divide = 5 # 1/5 of income on construction
		}
	}
}

construction_demand_ratio = {
	if = {
		limit = {
			AND = {
				has_variable = nominal_construction_demand
				has_variable = national_production
			}
		}
		value = var:nominal_construction_demand
		multiply = construction_goods_per_point
		divide = {
			value = var:national_production
			min = 0.1
		}
	}
}

construction_regulator_level = {
	if = {
		limit = {
			has_building = building_construction_sector
		}
		b:building_construction_sector = {
			value = level
		}
	}
	min = 1
}

#Scope: State
calculate_state_construction_efficiency = {
	b:building_construction_sector = {
		value = level
		multiply = occupancy
	}
	save_temporary_value_as = num_to_sqrt
	value = calculate_sqrt
	multiply = goods_efficiency_per_level
	owner = {
		multiply = construction_sector_efficiency_multiplier
	}
}

# Scope: Any
# Calculates square roots for values of up to 10000000000
calculate_sqrt = {
	# Use a linear estimate over two intervals to calculate an estimated square root:
	# https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Linear_estimates
	value = scope:num_to_sqrt
	save_temporary_value_as = a
	value = 0
	save_temporary_value_as = n
	if = {
		limit = {
			scope:a = 0
		}
		value = 0
	}
	else = {
		if = {
			limit = {
				scope:a >= 100
			}
			value = recurse_a
			divide = 100
		}
		else_if = {
			limit = {
				scope:a < 1
			}
			value = recurse_a
			multiply = 100
		}
		if = {
			limit = {
				scope:a < 10
			}
			value = 0.28
			multiply = scope:a
			add = 0.89
		}
		else = {
			value = 0.089
			multiply = scope:a
			add = 2.8
		}
		multiply = {
			value = 1
			if = {
				limit = {
					scope:n > 0
				}
				value = recurse_n
				multiply = 10
			}
			else_if = {
				limit = {
					scope:n < 0
				}
				value = recurse_n
				divide = 10
			}
		}
		save_temporary_value_as = guess
		value = recurse_sqrt1
	}
}

recurse_sqrt1 = {
	value = {
		add = scope:guess
		subtract = {
			add = {
				add = scope:guess
				multiply = scope:guess
			}
			subtract = scope:num_to_sqrt
			divide = {
				add = scope:guess
				multiply = 2
			}
		}
	}
	save_temporary_value_as = guess
	value = scope:num_to_sqrt
	subtract = {
		value = scope:guess
		multiply = scope:guess
	}
	save_temporary_value_as = error_absolute
	divide = scope:num_to_sqrt # error proportional to total
	multiply = error_accuracy_denominator
	save_temporary_value_as = error_relative
	if = {
		limit = {
			AND = {
				OR = {
					scope:error_relative > 1
					scope:error_relative < -1
				}
				OR = {
					scope:error_absolute > 0.01
					scope:error_absolute < -0.01
				}
			}
		}
		value = recurse_sqrt2
	}
	else = {
		value = scope:guess
	}
}

recurse_sqrt2 = {
	value = recurse_sqrt1
}

recurse_a = {
	value = scope:a
	save_temporary_value_as = a
	if = {
		limit = {
			scope:a >= 100
		}
		value = scope:n
		add = 1
		save_temporary_value_as = n
		value = scope:a
		divide = 100
		save_temporary_value_as = a
		value = recurse_a2
	}
	else_if = {
		limit = {
			scope:a < 1
		}
		value = scope:n
		subtract = 1
		save_temporary_value_as = n
		value = scope:a
		multiply = 100
		save_temporary_value_as = a
		value = recurse_a2
	}
}

recurse_a2 = {
	value = recurse_a
}

recurse_n = {
	value = 1
	if = {
		limit = {
			scope:n > 0
		}	
		value = scope:n
		subtract = 1
		save_temporary_value_as = n
		value = recurse_n2
		multiply = 10
	}
	else_if = {
		limit = {
			scope:n < 0
		}	
		value = scope:n
		add = 1
		save_temporary_value_as = n
		value = recurse_n2
		divide = 10
	}
}

recurse_n2 = {
	value = recurse_n
}

goods_efficiency_per_level = {
	b:building_construction_sector = {
		if = {
			limit = {
				has_active_production_method = pm_wooden_buildings
			}
			value = 0.001
		}
		else_if = {
			limit = {
				has_active_production_method = pm_iron_frame_buildings
			}
			value = 0.002
		}
		else_if = {
			limit = {
				has_active_production_method = pm_steel_frame_buildings
			}
			value = 0.0035
		}
		else = {
			value = 0.005
		}
	}
}

#Scope: Country
calculate_construction_sector_max_level = {
	value = 0
	if = {
		limit = {
			has_technology_researched = urbanization
		}
		add = 10
	}
	if = {
		limit = {
			has_technology_researched = urban_planning
		}
		add = 5
	}
	if = {
		limit = {
			has_technology_researched = modern_sewerage
		}
		add = 5
	}
	if = {
		limit = {
			has_technology_researched = steel_frame_buildings
		}
		add = 5
	}
	if = {
		limit = {
			has_technology_researched = elevator
		}
		add = 5
	}
}

#Scope: Country
construction_sector_efficiency_multiplier = {
	value = calculate_construction_sector_max_level
	#multiply = 2 #account for halved construction sector
	save_temporary_value_as = modified_max_level
	# Pre-calculated values using the square root of the level where we want equality
	# sqrt(20) = 4.47 etc.
	if = {
		limit = {
			scope:modified_max_level = 10
		}
		value = 3.1622
	}
	else_if = {
		limit = {
			scope:modified_max_level = 15
		}
		value = 3.8729
	}
	else_if = {
		limit = {
			scope:modified_max_level = 20
		}
		value = 4.4721
	}
	else_if = {
		limit = {
			scope:modified_max_level = 25
		}
		value = 5
	}
	else_if = {
		limit = {
			scope:modified_max_level = 30
		}
		value = 5.4772
	}
}

# Scope: State
state_construction_allocation = {
	value = 1
	add = define:NEconomy|PRICE_RANGE
	multiply = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
	multiply = var:state_construction_production
	multiply = local_var:state_construction_base_price
	save_temporary_value_as = spending_excess_point
	
	value = 1
	subtract = define:NEconomy|PRICE_RANGE
	divide = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
	multiply = var:state_construction_production
	multiply = local_var:state_construction_base_price
	save_temporary_value_as = spending_low_point

	value = local_var:state_construction_spending
	divide = {
		value = var:state_construction_production
		min = 0.001
	}
	save_temporary_value_as = estimated_price

	# Calculate the the amount of buy orders you can get with a certain amount of money
	# based on the market price formula https://vic3.paradoxwikis.com/Market#Market_price 
	# but with price = amount / buy orders and solved for buy orders.
	if = { 	# This is the case where there is no spending
		limit = {
			local_var:state_construction_spending = 0
		}
		value = 0
	}
	else_if = { # This is the case where the clamp is -1
		limit = {
			local_var:state_construction_spending <= scope:spending_low_point
		}
		value = local_var:state_construction_spending
		divide = {
			value = local_var:state_construction_base_price
			multiply = {
				value = 1
				subtract = define:NEconomy|PRICE_RANGE
			}
		}
	}
	else_if = { # This is the case where the clamp is 1
		limit = {
			local_var:state_construction_spending >= scope:spending_excess_point
		}
		value = local_var:state_construction_spending
		divide = {
			value = local_var:state_construction_base_price
			multiply = {
				value = 1
				add = define:NEconomy|PRICE_RANGE
			}
		}
	}
	else_if = { # This is the case where buy orders > sell orders, so the denominator is BUY

		limit = {
			scope:estimated_price > local_var:state_construction_base_price
		}
		value = var:state_construction_production
		multiply = {
			value = 4
			multiply = local_var:state_construction_spending
			multiply = define:NEconomy|PRICE_RANGE
			multiply = {
				value = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
				subtract = 1
			}
			add = {
				value = local_var:state_construction_base_price
				multiply = var:state_construction_production
				multiply = {
					subtract = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
					add = define:NEconomy|PRICE_RANGE
					add = 1
					save_temporary_value_as = to_square
					multiply = scope:to_square
				}
			}
		}
		divide = {
			value = local_var:state_construction_base_price
			multiply = define:NEconomy|PRICE_RANGE
			multiply = define:NEconomy|PRICE_RANGE
		}
		save_temporary_value_as = num_to_sqrt
		value = calculate_sqrt
		multiply = define:NEconomy|PRICE_RANGE
		add = {
			value = var:state_construction_production
			multiply = {
				subtract = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
				add = define:NEconomy|PRICE_RANGE
				add = 1
			}
		}
		divide = {
			value = define:NEconomy|PRICE_RANGE
			multiply = 2
		}
	} 
	else = { # This is the case where buy orders < sell orders, so the denominator is SELL
		value = local_var:state_construction_spending
		multiply = {
			value = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
			subtract = 1
		}
		add = {
			value = var:state_construction_production
			multiply = define:NEconomy|PRICE_RANGE
			multiply = local_var:state_construction_base_price
		}
		divide = {
			add = define:NEconomy|BUY_SELL_DIFF_AT_MAX_FACTOR
			add = define:NEconomy|PRICE_RANGE
			subtract = 1
			multiply = local_var:state_construction_base_price
		}
	}
	divide = construction_goods_per_point
}

# Scope: State
calculate_state_construction_base_price = {
	b:building_construction_regulator = {
		if = {
			limit = {
				has_active_production_method = pm_wood_point_conversion
			}
			value = wood_construction_good_base_price
		}
		else_if = {
			limit = {
				has_active_production_method = pm_iron_point_conversion
			}
			value = iron_construction_good_base_price
		}
		else_if = {
			limit = {
				has_active_production_method = pm_steel_point_conversion
			}
			value = steel_construction_good_base_price
		}
		else = {
			value = arc_welded_construction_good_base_price
		}
	}
}